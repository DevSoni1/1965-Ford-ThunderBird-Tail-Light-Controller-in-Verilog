module ThundirBird(
	output reg la,lb,lc,ra,rb,rc,
	input left,right,haz,clear,clock);

parameter s0 = 3'd0, s1 = 3'd1, s2 = 3'd2, s3 = 3'd3, s4 = 3'd4, s5 = 3'd5, s6 = 3'd6, s7 = 3'd7;

reg [2:0] state,next_state; 

always@(posedge clock or negedge clock)
	if(clear)
		state <= s0;
	else
		state <= next_state;

always@(state)
begin
	la = 0; lb = 0; lc = 0; ra = 0; rb = 0; rc = 0;
case(state)
	s0	:	;
	s1	:	begin
			la = 1;
			end
	s2	:	begin
			la = 1;	lb = 1; 
			end
	s3	:	begin
			la = 1;	lb = 1;	lc = 1; 
			end
	s4	:	begin
			la = 0;	lb = 0;	lc = 0;	ra = 1;
			end
	s5	:	begin
			la = 0;	lb = 0;	lc = 0;	ra = 1;	rb = 1;
			end
	s6	:	begin
			la = 0;	lb = 0;	lc = 0;	ra = 1;	rb = 1;	rc = 1;
			end
	s7	:	begin
			la = 1;	lb = 1;	lc = 1;	ra = 1;	rb = 1;	rc = 1;
			end
endcase
end

always@(state or left or right or haz)
begin
case(state)
	s0	:	if(left && ~haz && ~right)
			next_state = s1;
			else if(haz || left && right)
			next_state = s7;
			else if(right && ~haz && ~left)
			next_state = s4;
			else
			next_state = s0;
			
	s1	:	if(haz)
			next_state = s7;
			else
			next_state = s2;
			
	s2	:	if(haz)
			next_state = s7;
			else
			next_state = s3;
			
	s3	:	next_state = s0;
	
	s4	:	if(haz)
			next_state = s7;
			else
			next_state = s5;
			
	s5	:	if(haz)
			next_state = s7;
			else
			next_state = s6;
			
	s6	:	next_state = s0;
			
	s7	:	next_state = s0;
			
	default	:	next_state = s0;
endcase
end
endmodule
